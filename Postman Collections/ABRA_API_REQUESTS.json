{
	"info": {
		"_postman_id": "5b8d4a4a-c3a4-4967-b556-59c566239816",
		"name": "ABRA API REQUESTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Basic Queries",
			"item": [
				{
					"name": "select",
					"item": [
						{
							"name": "invoices with chosen fields and with renaming",
							"id": "66c2befe-051d-4e1f-b4ab-aa3209a22dc9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=ID,DisplayName+as+DocNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "ID,DisplayName+as+DocNumber"
										}
									]
								},
								"description": "<h2>Selection example #1</h2><p>Selection of invoices collection where every invoice object is going to have <b>ID</b> and <b>DisplayName. DisplayName</b> will be renamed as <b>DocNumber</b>.</p>\n\nIn this way, it is possible to include user or non-persistent fields of the Business object in the result. However, we recommend using non-persistent BO fields only in extreme cases, their selection degrades performance."
							},
							"response": []
						},
						{
							"name": "Invoices with all persistent and user items",
							"id": "89b0f944-a3cd-4080-b95d-e98c60cca9e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=*",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "*"
										}
									]
								},
								"description": "<h2>Selection example #2</h2><p>Selection of invoices collection which will contain all persistant fields and user items of business object.</p>"
							},
							"response": []
						},
						{
							"name": "Invoices with chosen fields",
							"id": "f4361cb7-365a-41a3-a859-593182baa04b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=Amount,Firm_ID.Name",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "Amount,Firm_ID.Name"
										}
									]
								},
								"description": "<h2>Selection example #3</h2><p>Selection of invoices collection, where every object is going to contain <b>Amount</b> and firm name to which is invoice issued <b>Firm_ID.Name.</b></p>"
							},
							"response": []
						},
						{
							"name": "Invoices with chosen fields and renaming",
							"id": "2a7ed3b8-ef88-470e-b895-d3c40479bfc4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=Amount,Firm_ID.Name+as+FirmName",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "Amount,Firm_ID.Name+as+FirmName"
										}
									]
								},
								"description": "## Selection example #4\n\nThis is copy of ***example #3*** except the **Firm_ID.Name** is renamed using '*as'* in returned json."
							},
							"response": []
						},
						{
							"name": "DocNumber created from multiple rows",
							"id": "16c15d49-2693-4ea2-8ae2-0ca9a47aa42e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=ID,DocQueue_ID.Code||'-'||OrdNumber||'/'||Period_ID.Code+as+DocNumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "ID,DocQueue_ID.Code||'-'||OrdNumber||'/'||Period_ID.Code+as+DocNumber"
										}
									]
								},
								"description": "<h2>Selection example #5</h2><p>Selection of invoices collection, where each invoice object will contain the <b>ID </b>and <b>DisplayName </b>fields, which this time is composed using fields retrieved from linked objects.</p><p>This is a faster variant than shown in the <i><b>example #1</b></i>, in which a non-persistent item <b>DisplayName</b> is used.</p>\n\n*   || - is used to connect strings of text together."
							},
							"response": []
						}
					],
					"id": "7aaec45a-49a6-4687-a352-70908611c2ff",
					"description": "<p>The select clause is used to select the <b>BO</b> fields that will be returned in the query result.</p>\n\n*   **BO** - business object"
				},
				{
					"name": "where",
					"item": [
						{
							"name": "Selection of fields with condition",
							"id": "72a499fe-b616-466e-bade-45271bec4332",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=Amount,Firm_ID.Name+as+FirmName&where=Amount+gt+10000",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "Amount,Firm_ID.Name+as+FirmName"
										},
										{
											"key": "where",
											"value": "Amount+gt+10000"
										}
									]
								},
								"description": "<p>Selection of multiple fields where Credit field has to be greater than 90000.</p>"
							},
							"response": []
						},
						{
							"name": "Selection of fields with multiple conditions",
							"id": "872d1e01-193c-4f21-8934-bf28bea85676",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issuedinvoices?select=Amount,Firm_ID.Name+as+FirmName&where=Amount+gt+10000+and+Firm_ID+ne+'1100000101'",
									"host": [
										"{{url}}"
									],
									"path": [
										"issuedinvoices"
									],
									"query": [
										{
											"key": "select",
											"value": "Amount,Firm_ID.Name+as+FirmName"
										},
										{
											"key": "where",
											"value": "Amount+gt+10000+and+Firm_ID+ne+'1100000101'"
										}
									]
								},
								"description": "<p>Selection of multiple fields where Credit field has to be greater than 90000 and Code field has to not equal to \"00005\".</p>"
							},
							"response": []
						},
						{
							"name": "Selection of fields with date condition",
							"id": "93ad42f7-f60a-4924-9ac2-c2de4ab30651",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "{{user}}",
										"password": "{{password}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/Firms?select=Name,RegisterDate$Date&where=RegisterDate$Date+ge+timestamp'1912-08-02T06:00:00'",
									"host": [
										"{{url}}"
									],
									"path": [
										"Firms"
									],
									"query": [
										{
											"key": "select",
											"value": "Name,RegisterDate$Date"
										},
										{
											"key": "where",
											"value": "RegisterDate$Date+ge+timestamp'1912-08-02T06:00:00'"
										}
									]
								},
								"description": "<p>Selection of fields with register date later than \"1912-08-02T06:00:00\".</p>"
							},
							"response": []
						}
					],
					"id": "a8284c36-0e2f-4de5-bb99-09b90289c3ed",
					"description": "Some placeholder <table><tbody><tr><th>operator</th><th>name</th><th>meaning</th><th>example</th><th>description</th></tr><tr><td>eq, =</td><td>equal</td><td>Value comparison. The result is positive if the two values are the same. It can be used to compare against null.</td><td>Code eq '1100000101'</td><td>If the code equals the value of '1100000101' the condition is valid.</td></tr><tr><td>ne, &lt;&gt;</td><td>not equal</td><td>Comparison of nonequivalent values. The result is positive if the two values do not match. It can be used to compare against null.</td><td>Code ne null</td><td>If the code isn't null the condition is valid.</td></tr><tr><td>gt, &gt;</td><td>greater than</td><td>Comparison of value. If one value is bigger than other one the result is positive.</td><td>Code gt 1000</td><td>If the code is bigger than 1000 the condition is valid.</td></tr><tr><td>ge, &gt;=</td><td>equals or greater than</td><td>Comparison of value. If one value is bigger than other one or the value is equal to another value the result is positive.</td><td>Code ge 1000</td><td>If the code is equal to 1000 or bigger than 1000 the condition is valid.</td></tr><tr><td>lt, &lt;</td><td>lower than</td><td>Comparison of value. If one value is lower than other one the result is positive.</td><td>Code lt 1000</td><td>If the code is less than 1000 the condition is valid.</td></tr><tr><td>le, &lt;</td><td>less than or greater than</td><td>Comparison of value. If one value is lower than other one or the value is equal to another value the result is positive.</td><td>Code le 1000</td><td>If the code is equal to 1000 or less than 1000 the condition is valid.</td></tr><tr><td>like</td><td>comparsion</td><td>Comparison of two strings. If the value equals the result is positive. \"*\" - is used as any string.</td><td>Code like '007420'</td><td>If the code is equal to '007420' the condition is valid.</td></tr><tr><td>in</td><td>contains</td><td>Compares the value with multiple values. If value on both sides equals the result is positive.</td><td>Code in ('111', '222', '345')</td><td>If the code is equal to '111' or '222' or '345' the condition is valid.</td></tr><tr><td>between</td><td>is in between;</td><td>Compares if the value is part of interval.</td><td>Code between 100 and 10000</td><td>If the code is equal or greater than 100 and at the same time is equal or lower than 10000 the condition is valid.</td></tr></tbody></table>"
				}
			],
			"id": "fd1d63e5-f6f2-4754-8755-37e4117b5526"
		}
	]
}